{"version":3,"file":"check.js","sourceRoot":"","sources":["../../src/util/check.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,SAAS,CAAC,KAAU;IAChC,OAAO,QAAQ,CAAC,KAAG,KAAO,EAAE,EAAE,CAAC,CAAC;AAClC,CAAC;AAEH,MAAM,UAAU,QAAQ,CAAC,KAAU;IAC/B,OAAO,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,KAAG,KAAO,CAAC,CAAC,CAAC,EAAE,CAAC;AACnE,CAAC;AAEH,MAAM,UAAU,eAAe,CAAC,KAAa,EAAE,GAAW,EAAE,GAAO;IAAP,oBAAA,EAAA,OAAO;IAC/D,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AAC7C,CAAC;AAEH,MAAM,UAAU,QAAQ,CAAC,KAAU;IAC/B,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC;AACnC,CAAC;AAEH,MAAM,UAAU,QAAQ,CAAC,KAAU;IAC/B,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AAClC,CAAC;AAEH,MAAM,UAAU,SAAS,CAAC,KAAU;IAChC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC;AACrF,CAAC;AAEH,MAAM,UAAU,SAAS,CAAC,KAAU;IAChC,OAAO,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,CAAC;AAC/C,CAAC;AAEH,MAAM,UAAU,SAAS,CAAC,KAAa;IACnC,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACnB,OAAO,CAAA,MAAI,KAAO,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC9B;SAAM;QACL,OAAO,EAAE,CAAC;KACX;AACH,CAAC;AAEH,MAAM,UAAU,YAAY,CAAC,IAAI;IAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;AAC1D,CAAC;AAEH,MAAM,UAAU,YAAY,CAAC,OAAY,EAAE,SAAiB;IACxD,OAAO,OAAO,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,KAAK;QAC1D,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAC7D,CAAC","sourcesContent":["export function toInteger(value: any): number {\n    return parseInt(`${value}`, 10);\n  }\n\nexport function toString(value: any): string {\n    return (value !== undefined && value !== null) ? `${value}` : '';\n  }\n\nexport function getValueInRange(value: number, max: number, min = 0): number {\n    return Math.max(Math.min(value, max), min);\n  }\n\nexport function isString(value: any): value is string {\n    return typeof value === 'string';\n  }\n\nexport function isNumber(value: any): value is number {\n    return !isNaN(toInteger(value));\n  }\n\nexport function isInteger(value: any): value is number {\n    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n  }\n\nexport function isDefined(value: any): boolean {\n    return value !== undefined && value !== null;\n  }\n\nexport function padNumber(value: number) {\n    if (isNumber(value)) {\n      return `0${value}`.slice(-2);\n    } else {\n      return '';\n    }\n  }\n\nexport function regExpEscape(text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\nexport function hasClassName(element: any, className: string): boolean {\n    return element && element.className && element.className.split &&\n        element.className.split(/\\s+/).indexOf(className) >= 0;\n  }\n"]}