{"version":3,"file":"date-parser-formater.js","sourceRoot":"","sources":["../../src/util/date-parser-formater.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAU,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,sBAAsB,EAAiB,MAAM,4BAA4B,CAAC;AAEnF,SAAS,SAAS,CAAC,KAAa;IAC5B,IAAI,QAAQ,CAAC,KAAK,CAAC,EAAE;QACjB,OAAO,CAAA,MAAI,KAAO,CAAA,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAChC;SAAM;QACH,OAAO,EAAE,CAAC;KACb;AACL,CAAC;AAED,SAAS,QAAQ,CAAC,KAAU;IACxB,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;AACpC,CAAC;AAED,SAAS,SAAS,CAAC,KAAU;IACzB,OAAO,QAAQ,CAAC,KAAG,KAAO,EAAE,EAAE,CAAC,CAAC;AACpC,CAAC;AAED;IAAyC,uCAAsB;IAY3D;QAAA,YACI,iBAAO,SAUV;QAlBO,aAAO,GAAW,CAAC,CAAC;QACpB,UAAI,GAAW,YAAY,CAAC;QAQhC,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAC7F,IAAM,IAAI,GAAG,KAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;QAC7C,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAClC,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,KAAI,CAAC,OAAO,GAAG,CAAC,EAAE;YACpB,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAClC,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACrB;;IACL,CAAC;IAfD,sBAAI,qCAAI;aAAR,UAAS,KAAa;YAClB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAcM,mCAAK,GAAZ,UAAa,KAAa;QACtB,IAAI,KAAK,EAAE;YACT,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;YAClD,IAAM,SAAS,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACrD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;aACxC;YACD,IAAI,EAAE,GAAW,CAAC,CAAC;YACnB,IAAI,IAAI,GAAW,CAAC,CAAC;YACrB,IAAI,IAAI,GAAW,CAAC,CAAC;YACrB,IAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;YACzB,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC5E,IAAI,GAAG,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpG,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjD,IAAI,GAAG,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpG,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjD,EAAE,GAAG,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;oBAClG,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;wBAC7F,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;aACnG;YACD,IAAI,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE;gBACtC,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAC,CAAC;aACrC;YACH,IAAI,EAAE,GAAG,GAAG,EAAE;gBACV,EAAE,GAAG,IAAI,GAAG,EAAE,CAAC;aAChB;YACH,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;SAC7C;QACD,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;IACvC,CAAC;IAEI,oCAAM,GAAb,UAAc,IAAmB;QAC7B,IAAI,UAAU,GAAW,EAAE,CAAC;QAC5B,IAAI,IAAI,EAAE;YACR,IAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAChE,IAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACtE,IAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;YACpF,UAAU,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC;gBAC/D,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,EAAE,EAAE,CAAC,CAAC;YACjH,UAAU,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;gBACzI,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,EAAE,EAAE,CAAC,CAAC;YAC9C,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,UAAU,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;oBACjE,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,EAAE,EAAE,CAAC,CAAC;aACtH;iBAAM;gBACH,UAAU,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;oBACnE,IAAI,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,GAAG,MAAM,EAAE,EAAE,CAAC,CAAC;aAC1H;SACF;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;IA1EQ,mBAAmB;QAD/B,UAAU,EAAE;;OACA,mBAAmB,CA2E/B;IAAD,0BAAC;CAAA,AA3ED,CAAyC,sBAAsB,GA2E9D;SA3EY,mBAAmB","sourcesContent":["import { Injectable, Inject } from '@angular/core';\nimport { NgbDateParserFormatter, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\n\nfunction padNumber(value: number) {\n    if (isNumber(value)) {\n        return `0${value}`.slice(-2);\n    } else {\n        return '';\n    }\n}\n\nfunction isNumber(value: any): boolean {\n    return !isNaN(toInteger(value));\n}\n\nfunction toInteger(value: any): number {\n    return parseInt(`${value}`, 10);\n}\n@Injectable()\nexport class DateParserFormatter extends NgbDateParserFormatter {\n    private separator: string;\n    private ddIndex: number;\n    private mmIndex: number;\n    private yyIndex: number;\n    private anSumar: number = 0;\n    private mask: string = 'dd/MM/yyyy';\n\n    set Mask(value: string) {\n        this.mask = value;\n    }\n\n    constructor() {\n        super();\n        this.separator = this.mask.indexOf('-') >= 0 ? '-' : this.mask.indexOf('.') >= 0 ? '.' : '/';\n        const part = this.mask.split(this.separator);\n        this.ddIndex = part.indexOf('dd');\n        this.mmIndex = part.indexOf('MM');\n        this.yyIndex = part.indexOf('yyyy');\n        if (this.yyIndex < 0) {\n          this.yyIndex = part.indexOf('yy');\n          this.anSumar = 2000;\n        }\n    }\n    public parse(value: string): NgbDateStruct {\n        if (value) {\n          value = value.replace(/\\.|\\/|-/g, this.separator);\n          const dateParts = value.trim().split(this.separator);\n          if (dateParts.length !== 3) {\n              return { year: 0, month: 0, day: 0 };\n          }\n          let an: number = 0;\n          let mois: number = 0;\n          let jour: number = 0;\n          const today = new Date();\n          if (isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {\n              jour = this.ddIndex === 0 ? toInteger(dateParts[0]) : this.ddIndex === 1 ? toInteger(dateParts[1]) :\n              this.ddIndex === 2 ? toInteger(dateParts[2]) : 0;\n              mois = this.mmIndex === 0 ? toInteger(dateParts[0]) : this.mmIndex === 1 ? toInteger(dateParts[1]) :\n              this.mmIndex === 2 ? toInteger(dateParts[2]) : 0;\n              an = this.yyIndex === 0 ? (dateParts[0].length < 2) ? 0 : toInteger(dateParts[0]) + this.anSumar :\n              this.yyIndex === 1 ? (dateParts[1].length < 2) ? 0 : toInteger(dateParts[1]) + this.anSumar :\n              this.yyIndex === 2 ? (dateParts[2].length < 2) ? 0 : toInteger(dateParts[2]) + this.anSumar : 0;\n          }\n          if (jour === 0 || mois === 0 || an === 0) {\n              return { year: 0, month: 0, day: 0};\n            }\n          if (an < 100) {\n              an = 2000 + an;\n            }\n          return { year: an, month: mois, day: jour };\n        }\n        return { year: 0, month: 0, day: 0 };\n      }\n\n    public format(date: NgbDateStruct): string {\n        let stringDate: string = '';\n        if (date) {\n          const stringDay = isNumber(date.day) ? padNumber(date.day) : '';\n          const stringMonth = isNumber(date.month) ? padNumber(date.month) : '';\n          const stringYear = isNumber(date.year) ? (date.year - this.anSumar).toString() : '';\n          stringDate = (stringDay) ? this.mask.replace('dd', stringDay) :\n          this.ddIndex === 0 ? this.mask.replace('dd' + this.separator, '') : this.mask.replace(this.separator + 'dd', '');\n          stringDate = (stringMonth) ? stringDate.replace('MM', stringMonth) : this.mmIndex === 0 ? stringDate.replace('MM' + this.separator, '') :\n          stringDate.replace(this.separator + 'MM', '');\n          if (this.anSumar) {\n              stringDate = (stringDay) ? stringDate.replace('yy', stringYear) :\n              this.yyIndex === 0 ? stringDate.replace('yy' + this.separator, '') : stringDate.replace(this.separator + 'yy', '');\n          } else {\n              stringDate = (stringDay) ? stringDate.replace('yyyy', stringYear) :\n              this.yyIndex === 0 ? stringDate.replace('yyyy' + this.separator, '') : stringDate.replace(this.separator + 'yyyy', '');\n          }\n        }\n        return stringDate;\n    }\n}\n"]}